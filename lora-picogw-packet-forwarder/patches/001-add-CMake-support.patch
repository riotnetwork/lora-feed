From e8145c9726aac1c1251213d2e87a2e2aec34d455 Mon Sep 17 00:00:00 2001
From: Xue Liu <liuxuenetmail@gmail.com>
Date: Fri, 8 Mar 2019 14:49:41 +0100
Subject: [PATCH 1/1] - add CMake support

Signed-off-by: Xue Liu <liuxuenetmail@gmail.com>
---
 CMakeLists.txt                 | 90 ++++++++++++++++++++++++++++++++++
 cmake/Modules/Findpicogw.cmake | 36 ++++++++++++++
 lora_pkt_fwd/CMakeLists.txt    | 68 +++++++++++++++++++++++++
 util_ack/CMakeLists.txt        | 38 ++++++++++++++
 util_sink/CMakeLists.txt       | 38 ++++++++++++++
 util_tx_test/CMakeLists.txt    | 44 +++++++++++++++++
 6 files changed, 314 insertions(+)
 create mode 100644 CMakeLists.txt
 create mode 100644 cmake/Modules/Findpicogw.cmake
 create mode 100644 lora_pkt_fwd/CMakeLists.txt
 create mode 100644 util_ack/CMakeLists.txt
 create mode 100644 util_sink/CMakeLists.txt
 create mode 100644 util_tx_test/CMakeLists.txt

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..ab6ff33
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,90 @@
+# -- Minimum required version
+cmake_minimum_required (VERSION 3.2)
+
+# -- Project name
+project (picogw_packet_forwarder)
+
+# -- Various includes
+include (CMakePackageConfigHelpers)
+include (GNUInstallDirs)
+include (CheckFunctionExists)
+
+# -- set c99 standard default
+set(CMAKE_C_STANDARD 99)
+
+# -- Required to build
+set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
+set(THREADS_PREFER_PTHREAD_FLAG TRUE)
+find_package(Threads REQUIRED)
+
+# -- Versioning with git tag
+if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)
+	execute_process(
+		COMMAND git describe --tags --always
+		WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
+		OUTPUT_VARIABLE "packet_forwarder_VERSION"
+		ERROR_QUIET
+		OUTPUT_STRIP_TRAILING_WHITESPACE)
+		if(packet_forwarder_VERSION STREQUAL "")
+			set(packet_forwarder_VERSION 0)
+		endif(packet_forwarder_VERSION STREQUAL "")
+		message( STATUS "Git full version: ${packet_forwarder_VERSION}" )
+	execute_process(
+		COMMAND /bin/bash -c "git describe --tags --abbrev=0 | cut --delimiter='v' --fields=2"
+		WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
+		OUTPUT_VARIABLE "packet_forwarder_VERSION_SHORT"
+		ERROR_QUIET
+		OUTPUT_STRIP_TRAILING_WHITESPACE)
+		if(packet_forwarder_VERSION_SHORT STREQUAL "")
+			set(packet_forwarder_VERSION_SHORT 0)
+		endif(packet_forwarder_VERSION_SHORT STREQUAL "")
+		message( STATUS "Git version: ${packet_forwarder_VERSION_SHORT}" )
+else(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)
+	set(packet_forwarder_VERSION_SHORT 0)
+	set(packet_forwarder_VERSION 0)
+endif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)
+
+# -- find packages
+find_package(picogw QUIET)
+if(NOT picogw_FOUND)
+	find_package(PkgConfig)
+	pkg_search_module(PICOGW picogw)
+
+	if(PICOGW_FOUND AND PICOGW_LINK_LIBRARIES)
+		message("-- pkg_config: libpicogw is found")
+		message("-- libpicogw include: ${PICOGW_INCLUDE_DIRS}")
+		message("-- libpicogw library: ${PICOGW_LINK_LIBRARIES}")
+	else()
+		# a workaround for https://github.com/xueliu/lora-feed/issues/#9
+		set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/")
+		find_package(picogw QUIET)
+		if(PICOGW_FOUND)
+			message("-- Findpicogw: libpicogw is found")
+			message("-- libpicogw include: ${PICOGW_INCLUDE_DIRS}")
+			message("-- libpicogw library: ${PICOGW_LINK_LIBRARIES}")
+		else()
+			message(FATAL_ERROR "-- CMake: libpicogw is not found")
+		endif()
+	endif()
+else()
+	message("-- CMake: libpicogw is found")
+endif()
+
+# when building, don't use the install RPATH already
+# (but later on when installing)
+SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
+if (NOT (${CMAKE_INSTALL_PREFIX} STREQUAL "/usr" ) )
+   SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
+endif()
+
+# -- add the lora_pkt_fwd
+add_subdirectory(lora_pkt_fwd)
+
+# -- add the util_ack
+add_subdirectory(util_ack)
+
+# -- add the util_sink
+add_subdirectory(util_sink)
+
+# -- add the util_tx_test
+add_subdirectory(util_tx_test)
diff --git a/cmake/Modules/Findpicogw.cmake b/cmake/Modules/Findpicogw.cmake
new file mode 100644
index 0000000..4973c5c
--- /dev/null
+++ b/cmake/Modules/Findpicogw.cmake
@@ -0,0 +1,36 @@
+# Find picogw
+#
+# Find the picogw includes and library
+#
+# if you need to add a custom library search path, do it via CMAKE_PREFIX_PATH
+#
+# This module defines
+#  PICOGW_INCLUDE_DIRS, where to find header, etc.
+#  PICOGW_LIBRARIES, the libraries needed to use picogw.
+#  PICOGW_LINK_LIBRARIES, the libraries needed to use picogw.
+#  PICOGW_FOUND, If false, do not try to use picogw.
+
+# only look in default directories
+find_path(
+	PICOGW_INCLUDE_DIR
+	NAMES loragw_hal.h # only one of those head files
+	PATH_SUFFIXES "libpicogw"
+	DOC "picogw include dir"
+)
+
+find_library(
+	PICOGW_LIBRARY
+	NAMES picogw libpicogw
+	DOC "picogw library"
+)
+
+set(PICOGW_INCLUDE_DIRS ${PICOGW_INCLUDE_DIR})
+set(PICOGW_LIBRARIES ${PICOGW_LIBRARY})
+set(PICOGW_LINK_LIBRARIES ${PICOGW_LIBRARY})
+
+# handle the QUIETLY and REQUIRED arguments and set USATCK_FOUND to TRUE
+# if all listed variables are TRUE, hide their existence from configuration view
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(picogw DEFAULT_MSG
+        PICOGW_LIBRARY PICOGW_INCLUDE_DIR )
+mark_as_advanced (PICOGW_INCLUDE_DIR PICOGW_LIBRARY)
diff --git a/lora_pkt_fwd/CMakeLists.txt b/lora_pkt_fwd/CMakeLists.txt
new file mode 100644
index 0000000..c58e306
--- /dev/null
+++ b/lora_pkt_fwd/CMakeLists.txt
@@ -0,0 +1,68 @@
+set(TARGET pico_pkt_fwd)
+
+add_executable(${TARGET} "")
+
+# --  add the compile options
+target_compile_options(
+	${TARGET}
+	PRIVATE
+	-Wall
+	-Wextra
+)
+
+target_compile_definitions(
+	${TARGET}
+	PRIVATE
+	VERSION_STRING="${packet_forwarder_VERSION_SHORT}"
+)
+
+target_sources(${TARGET}
+	PRIVATE
+		${CMAKE_CURRENT_LIST_DIR}/src/base64.c
+		${CMAKE_CURRENT_LIST_DIR}/src/jitqueue.c
+		${CMAKE_CURRENT_LIST_DIR}/src/lora_pkt_fwd.c
+		${CMAKE_CURRENT_LIST_DIR}/src/parson.c
+		${CMAKE_CURRENT_LIST_DIR}/src/timersync.c
+)
+
+target_include_directories(${TARGET}
+	PRIVATE
+		${CMAKE_CURRENT_LIST_DIR}
+		${CMAKE_CURRENT_LIST_DIR}/inc
+)
+
+target_link_libraries(${TARGET}
+	PUBLIC
+		Threads::Threads
+		m
+)
+
+if(PICOGW_FOUND)
+target_include_directories(${TARGET}
+	PRIVATE
+		${PICOGW_INCLUDE_DIRS}
+)
+
+target_link_libraries(${TARGET}
+	PRIVATE
+		${PICOGW_LINK_LIBRARIES}
+)
+
+elseif(picogw_FOUND)
+
+target_link_libraries(${TARGET}
+	PRIVATE
+		Semtech::picogw
+)
+endif()
+
+set_target_properties(${TARGET} PROPERTIES VERSION ${packet_forwarder_VERSION})
+set_target_properties(${TARGET} PROPERTIES SOVERSION ${packet_forwarder_VERSION_SHORT})
+
+# add the install targets
+install (
+	TARGETS ${TARGET}
+	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT shlib
+	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+)
diff --git a/util_ack/CMakeLists.txt b/util_ack/CMakeLists.txt
new file mode 100644
index 0000000..95826c2
--- /dev/null
+++ b/util_ack/CMakeLists.txt
@@ -0,0 +1,38 @@
+set(TARGET util_ack)
+
+add_executable(${TARGET} "")
+target_sources(${TARGET}
+        PRIVATE
+        ${CMAKE_CURRENT_LIST_DIR}/src/util_ack.c
+)
+
+if(PICOGW_FOUND)
+target_include_directories(${TARGET}
+	PRIVATE
+		${PICOGW_INCLUDE_DIRS}
+)
+
+target_link_libraries(${TARGET}
+	PRIVATE
+		${PICOGW_LINK_LIBRARIES}
+)
+
+elseif(picogw_FOUND)
+
+target_link_libraries(${TARGET}
+	PRIVATE
+		Semtech::picogw
+)
+endif()
+
+set_target_properties(${TARGET} PROPERTIES
+        RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
+)
+
+# add the install targets
+install (
+	TARGETS ${TARGET}
+  	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT shlib
+	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+)
diff --git a/util_sink/CMakeLists.txt b/util_sink/CMakeLists.txt
new file mode 100644
index 0000000..d7ff0e7
--- /dev/null
+++ b/util_sink/CMakeLists.txt
@@ -0,0 +1,38 @@
+set(TARGET util_sink)
+
+add_executable(${TARGET} "")
+target_sources(${TARGET}
+        PRIVATE
+	${CMAKE_CURRENT_LIST_DIR}/src/util_sink.c
+)
+
+if(PICOGW_FOUND)
+target_include_directories(${TARGET}
+	PRIVATE
+		${PICOGW_INCLUDE_DIRS}
+)
+
+target_link_libraries(${TARGET}
+	PRIVATE
+		${PICOGW_LINK_LIBRARIES}
+)
+
+elseif(picogw_FOUND)
+
+target_link_libraries(${TARGET}
+	PRIVATE
+		Semtech::picogw
+)
+endif()
+
+set_target_properties(${TARGET} PROPERTIES
+        RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
+)
+
+# add the install targets
+install (
+	TARGETS ${TARGET}
+  	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT shlib
+	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+)
diff --git a/util_tx_test/CMakeLists.txt b/util_tx_test/CMakeLists.txt
new file mode 100644
index 0000000..3a26925
--- /dev/null
+++ b/util_tx_test/CMakeLists.txt
@@ -0,0 +1,44 @@
+set(TARGET util_tx_test)
+
+add_executable(${TARGET} "")
+target_sources(${TARGET}
+        PRIVATE
+	${CMAKE_CURRENT_LIST_DIR}/src/util_tx_test.c
+	${CMAKE_CURRENT_LIST_DIR}/src/base64.c
+)
+
+target_include_directories(${TARGET}
+	PRIVATE
+        ${CMAKE_CURRENT_LIST_DIR}/inc
+)
+
+if(PICOGW_FOUND)
+target_include_directories(${TARGET}
+	PRIVATE
+		${PICOGW_INCLUDE_DIRS}
+)
+
+target_link_libraries(${TARGET}
+	PRIVATE
+		${PICOGW_LINK_LIBRARIES}
+)
+
+elseif(picogw_FOUND)
+
+target_link_libraries(${TARGET}
+	PRIVATE
+		Semtech::picogw
+)
+endif()
+
+set_target_properties(${TARGET} PROPERTIES
+        RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
+)
+
+# add the install targets
+install (
+	TARGETS ${TARGET}
+  	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT shlib
+	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+)
-- 
2.17.0

